/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projeto;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author Rafael
 */
public class FrmJogo
        extends javax.swing.JFrame
        implements Runnable {
    
    private boolean left;
    private boolean right;
    private boolean up;
    private boolean down;
    private boolean fimJogo;
    private boolean keyRestart;
    private boolean ganhou;
    

    /**
     * Creates new form FrmJogo
     */
    public FrmJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            up = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            down = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = true;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            up = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            down = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = false;
        }
    }//GEN-LAST:event_formKeyReleased

                   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmJogo().setVisible(true);
            }
        });
    }
    
    @Override
    public void run() {
        Graphics g;

        ArrayList<Base> lista = new ArrayList();
        ArrayList<Base> lixo = new ArrayList();
           fimJogo=false;
        Player player = new Player("img/frog.png");
        player.setLargura(45);
        player.setAltura(40);
        player.setIncY(0);
        player.setIncX(0);
        player.setY(getHeight() - player.getAltura() -10);
        player.setX(getWidth()/2);
        lista.add(player);

        Random r = new Random();
        
        
        for (int i = 0; i < 5; i++) {
            Inimigo b = new Inimigo("img/cop.png");
            b.setLargura(76);
            b.setAltura(24);
            b.setY(50+(90*i));
            b.setX(r.nextInt((getWidth())));
            if(i>2)
                b.setIncX(1);
            else if(i>0 && i<=2)
                b.setIncX(2);
            else
                b.setIncX(3);
            int red = r.nextInt(255);
            int green = r.nextInt(255);
            int blue = r.nextInt(255);
            b.setCor(new Color(red, green, blue));
            lista.add(b);
        }

        while (true) {
            g = getBufferStrategy().getDrawGraphics();
            //Limpa a tela
            g.setColor(Color.GRAY);
            g.fillRect(0, 0, getWidth(), getHeight());
            //Desenha um oval

            
            
            //Colisao Player com Inimigo
            for (Base b : lista) {
                if (player.colisao(b)) {
                    lixo.add(player);
                    fimJogo = true;
                    ganhou = false;
                }
            }
           
            for (Base b : lista) {
                b.mover();
            }

            
            for (Base b : lista) {
                b.desenhar(g);
            }

            Colisao aux = player.trataColisao(getWidth(), getHeight());
            if (aux == Colisao.UP) {
                    lixo.add(player);
                    fimJogo=true;
                    ganhou=true;
                }
            else if(aux == Colisao.RIGHT)
                    {
                        player.setIncX(0);
                        right = false;
                    }
            else if(aux == Colisao.LEFT)
                    {
                        player.setIncX(0);
                        left = false;
                    }

            else if (aux == Colisao.DOWN) {
                        player.setIncY(0);
                        down = false;
                    }
                       
            for (Base b : lista) {
              
                Colisao aux1 =  b.trataColisao(getWidth(), getHeight());
                
                if(aux1 == Colisao.RIGHT)
                    {
                        b.setIncX(b.getIncX() * (-1));
                        right = false;
                    }
                else if(aux1== Colisao.LEFT)
                    {
                        b.setIncX(b.getIncX() * (-1));
                        left = false;
                    }
                
            }

            
            
            lista.removeAll(lixo);
            lixo.clear();

            

            if ((lista.size() == 1 || fimJogo) && !ganhou) {
                g.setColor(Color.BLACK);
                g.drawString("FIM de JOGO - Tecle R para Reiniciar", 100, 100);
                fimJogo = true;
            }
            
            else if ((lista.size() == 1 || fimJogo) && ganhou) {
                g.setColor(Color.BLACK);
                g.drawString("GANHOU!!! - Tecle R para jogar novamente", 100, 100);
                fimJogo = true;
            }

            if (fimJogo && keyRestart) {
                player = new Player("img/frog.png");
                player.setLargura(40);
                player.setAltura(40);
                player.setIncY(0);
                player.setIncX(0);
                player.setY(getHeight() - player.getAltura()-10);
                player.setX(getWidth()/2);
                lista.add(player);
                fimJogo = false;
            }
            
            if(up) {
                player.setIncY(-1);
            } else if (down) {
                player.setIncY(1);
            } else if (left) {
                player.setIncX(-1);
            } else if (right) {
                player.setIncX(1);
                } else {
                    player.setIncX(0);
                    player.setIncY(0);
                }
            

            
            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
